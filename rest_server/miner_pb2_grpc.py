# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import miner_pb2 as miner__pb2


class MinerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartMining = channel.unary_unary(
                '/miner.MinerService/StartMining',
                request_serializer=miner__pb2.StartMiningRequest.SerializeToString,
                response_deserializer=miner__pb2.StartMiningResponse.FromString,
                )
        self.PauseMining = channel.unary_unary(
                '/miner.MinerService/PauseMining',
                request_serializer=miner__pb2.PauseMiningRequest.SerializeToString,
                response_deserializer=miner__pb2.PauseMiningResponse.FromString,
                )
        self.ResumeMining = channel.unary_unary(
                '/miner.MinerService/ResumeMining',
                request_serializer=miner__pb2.ResumeMiningRequest.SerializeToString,
                response_deserializer=miner__pb2.ResumeMiningResponse.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/miner.MinerService/GetStatus',
                request_serializer=miner__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=miner__pb2.GetStatusResponse.FromString,
                )


class MinerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartMining(self, request, context):
        """Start a new mining session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseMining(self, request, context):
        """Pause current mining session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeMining(self, request, context):
        """Resume mining from saved state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Get current mining status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MinerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartMining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMining,
                    request_deserializer=miner__pb2.StartMiningRequest.FromString,
                    response_serializer=miner__pb2.StartMiningResponse.SerializeToString,
            ),
            'PauseMining': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseMining,
                    request_deserializer=miner__pb2.PauseMiningRequest.FromString,
                    response_serializer=miner__pb2.PauseMiningResponse.SerializeToString,
            ),
            'ResumeMining': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeMining,
                    request_deserializer=miner__pb2.ResumeMiningRequest.FromString,
                    response_serializer=miner__pb2.ResumeMiningResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=miner__pb2.GetStatusRequest.FromString,
                    response_serializer=miner__pb2.GetStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'miner.MinerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MinerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartMining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miner.MinerService/StartMining',
            miner__pb2.StartMiningRequest.SerializeToString,
            miner__pb2.StartMiningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PauseMining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miner.MinerService/PauseMining',
            miner__pb2.PauseMiningRequest.SerializeToString,
            miner__pb2.PauseMiningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResumeMining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miner.MinerService/ResumeMining',
            miner__pb2.ResumeMiningRequest.SerializeToString,
            miner__pb2.ResumeMiningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miner.MinerService/GetStatus',
            miner__pb2.GetStatusRequest.SerializeToString,
            miner__pb2.GetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
